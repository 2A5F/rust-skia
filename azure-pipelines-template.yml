jobs:
- job: ${{ parameters.platform }}
  strategy:
    matrix:
      stable:
        toolchain: stable
        features: ''
        exampleArgs: '--driver cpu --driver pdf'
      #beta:
      #  toolchain: beta
      #  features: ''
      #stable-vulkan:
      #  toolchain: stable
      #  features: 'vulkan'
      #stable-svg:
      #  toolchain: stable
      #  features: 'svg'
      #  exampleArgs: '--driver svg'
  variables:
    platform: ${{ parameters.platform }}
    image: ${{ parameters.image }}
    rust_backtrace: 1
  pool:
    vmImage: $(image)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.x'
      addToPath: true
      architecture: 'x64'

  - ${{ if eq(parameters.platform, 'macOS') }}:
    # macOS
    - script: |
        sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
        brew update && brew install llvm@7
      displayName: Install SDK Headers & LLVM

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install Rust

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        choco install llvm --version 7.0.1
      displayName: Install Rust on Windows

  # All platforms.
  - script: |
        rustc -Vv
        cargo -V
    displayName: Print versions

  # Note: features are ignored when set in the workspace. This is a known bug in cargo (#5015), so cd into skia-safe instead.
  # Note: SKIA_BINARIES_KEY is set to empty ('') when the build script decides not to publish.
  - bash: |
      cd skia-safe && cargo build --release --features "$(features)" --all-targets -vv
      export SKIA_BINARIES_KEY=$(cat $(Build.ArtifactStagingDirectory)/skia-binaries/key.txt)
      echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
    displayName: Build all targets in skia-safe

  - script: cd skia-safe && cargo test --release --features "$(features)" -vv
    displayName: Test skia-safe

  - script: cd skia-safe && cargo run --release --features "$(features)" --example skia-org "$(Build.ArtifactStagingDirectory)/skia-org" $(exampleArgs)
    displayName: Generate skia-org Example Images
    condition: ne(variables['exampleArgs'], '')

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/skia-org'
      artifactName: 'skia-org-examples-$(platform)-$(toolchain)'
    condition: ne(variables['exampleArgs'], '')

  - task: ArchiveFiles@2
    condition: and(succeeded(), eq(variables['toolchain'], 'stable'), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'prebuilt-binaries')))
    displayName: 'Archive binaries'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/skia-binaries'
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/skia-binaries-$(SKIA_BINARIES_KEY).tar.gz'

  - task: GithubRelease@0
    condition: and(succeeded(), eq(variables['toolchain'], 'stable'), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'prebuilt-binaries')))
    displayName: 'Release to GitHub rust-skia/skia-binaries'
    inputs:
      action: create
      gitHubConnection: pragmatrix
      repositoryName: rust-skia/rust-skia
      tagSource: manual
      tag: '$(SKIA_BINARIES_KEY)'
      assets: '$(Build.ArtifactStagingDirectory)/skia-binaries-$(SKIA_BINARIES_KEY).tar.gz'
      # assetUploadMode: 'replace'
      # TODO: change before merging this into master.
      # isDraft: true
      # TODO: change before merging this into master.
      # isPreRelease: true
      addChangeLog: false
