inputs:
  # TODO: do we need that, runner.os should be sufficient.
  host-os: 
    description: 'The operating system of the host'
    required: true

  host-target: 
    description: 'The target of the host'
    required: true

  rust-edition:
    description: 'The edition of rust to build with, like "stable" or "beta"'
    required: true

  features:
    description: 'The feature set to build all targets with.'
    required: true

runs:
  using: 'composite'
  # TODO: we could use actions here that set up
  # the OS based on runner.os
  steps:
  - name: Install Rust
    uses: hecrj/setup-rust-action@master
    with:
      rust-version: ${{ matrix.rust }}

  - name: Install Clippy
    run: |
      rustup component add clippy
    shell: bash

  # remove LLVM on macOS so that only Apple's clang is used
  - name: Remove LLVM (macOS)
    run: |
      brew uninstall llvm
    if: runner.os == 'macOS'

  - name: LLVM (Windows only)
    run: |
      choco install llvm
    if: runner.os == 'Windows'

  - name: Setup Python 2 (Windows only)
    uses: actions/setup-python@v2
    with:
      python-version: '2.7.18'
      architecture: 'x64'
    if: runner.os == 'Windows'

  - name: Python Version (Windows only)
    run: |
      python --version
    if: runner.os == 'Windows'

  - name: Build Host Target
    uses: ./.github/actions/build-target
    with:
      target: '${{ inputs.host-target }}'
      features: '${{ inputs.features }}'
      runBinaries: true



#    - name: Run Clippy
#      run: cargo clippy -vv --release --workspace
#      shell: bash
