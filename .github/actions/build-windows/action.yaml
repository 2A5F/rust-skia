inputs:
  # TODO: do we need that? runner.os should be sufficient.
  host-os: 
    description: 'The operating system of the host'
    required: true

  rust-edition:
    description: 'The edition of rust to build with, like "stable" or "beta"'
    required: true

runs:
  using: 'composite'
  steps:
  - name: 'Install Rust target x86_64-pc-windows-msvc'
    shell: bash
    run: |
      rustup target add x86_64-pc-windows-msvc

  - name: 'Build all targets in skia-safe for x86_64-pc-windows-msvc with features '
    shell: bash
    run: |
      if [ "false" == "true" ]; then
        TARGET=x86_64-pc-windows-msvc
        TARGET=${TARGET//-/_}
        export CC_${TARGET}=x86_64-pc-windows-msvc$(androidAPILevel)-clang$(androidBinExt)
        export CXX_${TARGET}=x86_64-pc-windows-msvc$(androidAPILevel)-clang++$(androidBinExt)
        TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
        export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc$(androidAPILevel)-clang$(androidBinExt)
        echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
      fi
      cargo clean
      cargo build -p skia-safe --all-targets --release --features "" --target x86_64-pc-windows-msvc
      export SKIA_BINARIES_TAG=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/tag.txt")
      export SKIA_BINARIES_KEY=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/key.txt")
      echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
      echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
