# Generated by mk-workflows.

name: 'linux'
on: [push]

concurrency: 
  group: 'linux-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  linux-stable-all-features:
    runs-on: ubuntu-20.04
    container: ghcr.io/pragmatrix/rust-skia-linux:latest
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Prepare Rustup
      run: (cd /github/home && ln -s /root/.cargo)
    
    - name: Update Rustup and Rust
      run: rustup update
    
    - name: Configure Rust Toolchain
      run: rustup default stable
    
    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-unknown-linux-gnu'
      shell: bash
      run: |
        rustup target add x86_64-unknown-linux-gnu
    
    - name: 'Build all targets in skia-safe for x86_64-unknown-linux-gnu with features egl,gl,textlayout,vulkan,wayland,webp,x11'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-unknown-linux-gnu
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-unknown-linux-gnu26-clang
          export CXX_${TARGET}=x86_64-unknown-linux-gnu26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-unknown-linux-gnu26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        set
        cargo build -vv -p skia-safe --all-targets --release --features "egl,gl,textlayout,vulkan,wayland,webp,x11" --target x86_64-unknown-linux-gnu
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: true
      run: |
        cargo run --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --target x86_64-unknown-linux-gnu "${{ runner.temp }}/skia-org" --driver cpu --driver pdf --driver svg
      
    - name: 'Upload skia-org example images'
      if: true
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-unknown-linux-gnu
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-linux-android'
      shell: bash
      run: |
        rustup target add aarch64-linux-android
    
    - name: 'Build all targets in skia-safe for aarch64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=aarch64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-linux-android26-clang
          export CXX_${TARGET}=aarch64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target aarch64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target aarch64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-linux-android'
      shell: bash
      run: |
        rustup target add x86_64-linux-android
    
    - name: 'Build all targets in skia-safe for x86_64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=x86_64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-linux-android26-clang
          export CXX_${TARGET}=x86_64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target x86_64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target x86_64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target i686-linux-android'
      shell: bash
      run: |
        rustup target add i686-linux-android
    
    - name: 'Build all targets in skia-safe for i686-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=i686-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=i686-linux-android26-clang
          export CXX_${TARGET}=i686-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=i686-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target i686-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target i686-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-i686-linux-android
        path: ${{ runner.temp }}/skia-org
  linux-stable-all-features-debug:
    runs-on: ubuntu-20.04
    container: ghcr.io/pragmatrix/rust-skia-linux:latest
    env: 
      SKIA_DEBUG: 1
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Prepare Rustup
      run: (cd /github/home && ln -s /root/.cargo)
    
    - name: Update Rustup and Rust
      run: rustup update
    
    - name: Configure Rust Toolchain
      run: rustup default stable
    
    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-unknown-linux-gnu'
      shell: bash
      run: |
        rustup target add x86_64-unknown-linux-gnu
    
    - name: 'Build all targets in skia-safe for x86_64-unknown-linux-gnu with features egl,gl,textlayout,vulkan,wayland,webp,x11'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-unknown-linux-gnu
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-unknown-linux-gnu26-clang
          export CXX_${TARGET}=x86_64-unknown-linux-gnu26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-unknown-linux-gnu26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "egl,gl,textlayout,vulkan,wayland,webp,x11" --target x86_64-unknown-linux-gnu
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --target x86_64-unknown-linux-gnu "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-unknown-linux-gnu
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-linux-android'
      shell: bash
      run: |
        rustup target add aarch64-linux-android
    
    - name: 'Build all targets in skia-safe for aarch64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=aarch64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-linux-android26-clang
          export CXX_${TARGET}=aarch64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target aarch64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target aarch64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-linux-android'
      shell: bash
      run: |
        rustup target add x86_64-linux-android
    
    - name: 'Build all targets in skia-safe for x86_64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=x86_64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-linux-android26-clang
          export CXX_${TARGET}=x86_64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target x86_64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target x86_64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target i686-linux-android'
      shell: bash
      run: |
        rustup target add i686-linux-android
    
    - name: 'Build all targets in skia-safe for i686-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=i686-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=i686-linux-android26-clang
          export CXX_${TARGET}=i686-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=i686-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target i686-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target i686-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-i686-linux-android
        path: ${{ runner.temp }}/skia-org
  linux-beta-all-features:
    runs-on: ubuntu-20.04
    container: ghcr.io/pragmatrix/rust-skia-linux:latest
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Prepare Rustup
      run: (cd /github/home && ln -s /root/.cargo)
    
    - name: Update Rustup and Rust
      run: rustup update
    
    - name: Configure Rust Toolchain
      run: rustup default beta
    
    - name: Install Clippy
      run: rustup component add clippy
    - name: 'Install Rust target x86_64-unknown-linux-gnu'
      shell: bash
      run: |
        rustup target add x86_64-unknown-linux-gnu
    
    - name: 'Build all targets in skia-safe for x86_64-unknown-linux-gnu with features egl,gl,textlayout,vulkan,wayland,webp,x11'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-unknown-linux-gnu
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-unknown-linux-gnu26-clang
          export CXX_${TARGET}=x86_64-unknown-linux-gnu26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-unknown-linux-gnu26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "egl,gl,textlayout,vulkan,wayland,webp,x11" --target x86_64-unknown-linux-gnu
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --all-targets --target x86_64-unknown-linux-gnu -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features egl,gl,textlayout,vulkan,wayland,webp,x11 --target x86_64-unknown-linux-gnu "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-unknown-linux-gnu
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-linux-android'
      shell: bash
      run: |
        rustup target add aarch64-linux-android
    
    - name: 'Build all targets in skia-safe for aarch64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=aarch64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-linux-android26-clang
          export CXX_${TARGET}=aarch64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target aarch64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target aarch64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target aarch64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-linux-android'
      shell: bash
      run: |
        rustup target add x86_64-linux-android
    
    - name: 'Build all targets in skia-safe for x86_64-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=x86_64-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-linux-android26-clang
          export CXX_${TARGET}=x86_64-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target x86_64-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target x86_64-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target x86_64-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-linux-android
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target i686-linux-android'
      shell: bash
      run: |
        rustup target add i686-linux-android
    
    - name: 'Build all targets in skia-safe for i686-linux-android with features gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "true" == "true" ]; then
          TARGET=i686-linux-android
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=i686-linux-android26-clang
          export CXX_${TARGET}=i686-linux-android26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=i686-linux-android26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,textlayout,vulkan,webp" --target i686-linux-android
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,textlayout,vulkan,webp --all-targets --target i686-linux-android -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,textlayout,vulkan,webp --target i686-linux-android "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-i686-linux-android
        path: ${{ runner.temp }}/skia-org