# Generated by mk-workflows.

name: 'Rust Skia'
on: [push]

concurrency: 
  group: 'build-macos-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build-macos-stable:
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable
    
    - name: Install Clippy
      run: rustup component add clippy
    
    # remove LLVM on macOS so that only Apple's clang is used
    - name: Remove LLVM (macOS)
      run: brew uninstall llvm
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        set -e
        rustup target add x86_64-apple-darwin
    
    - name: 'Build all targets in skia-safe for x86_64-apple-darwin with features gl,vulkan,textlayout,metal'
      shell: bash
      run: |
        set -e
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin$(androidAPILevel)-clang$(androidBinExt)
          export CXX_${TARGET}=x86_64-apple-darwin$(androidAPILevel)-clang++$(androidBinExt)
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin$(androidAPILevel)-clang$(androidBinExt)
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,vulkan,textlayout,metal" --target x86_64-apple-darwin
        export SKIA_BINARIES_TAG=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
  build-macos-beta:
    runs-on: macOS-10.15
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: beta
    
    - name: Install Clippy
      run: rustup component add clippy
    
    # remove LLVM on macOS so that only Apple's clang is used
    - name: Remove LLVM (macOS)
      run: brew uninstall llvm
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        set -e
        rustup target add x86_64-apple-darwin
    
    - name: 'Build all targets in skia-safe for x86_64-apple-darwin with features gl,vulkan,textlayout,metal'
      shell: bash
      run: |
        set -e
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin$(androidAPILevel)-clang$(androidBinExt)
          export CXX_${TARGET}=x86_64-apple-darwin$(androidAPILevel)-clang++$(androidBinExt)
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin$(androidAPILevel)-clang$(androidBinExt)
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,vulkan,textlayout,metal" --target x86_64-apple-darwin
        export SKIA_BINARIES_TAG=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"