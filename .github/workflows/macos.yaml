# Generated by mk-workflows.

name: 'macos'
on: [push]

concurrency: 
  group: 'macos-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  macos-stable-all-features:
    runs-on: macOS-10.15
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable
    
    - name: Install Clippy
      run: rustup component add clippy
    
    # remove LLVM on macOS so that only Apple's clang is used
    - name: Remove LLVM (macOS)
      run: brew uninstall llvm
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin
    
    - name: 'Build all targets in skia-safe for x86_64-apple-darwin with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-darwin
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: true
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-darwin "${{ runner.temp }}/skia-org" --driver cpu --driver pdf --driver svg
      
    - name: 'Upload skia-org example images'
      if: true
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios
    
    - name: 'Build all targets in skia-safe for aarch64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target aarch64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target aarch64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios
    
    - name: 'Build all targets in skia-safe for x86_64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ runner.temp }}/skia-org
  macos-stable-all-features-debug:
    runs-on: macOS-10.15
    env: 
      SKIA_DEBUG: 1
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable
    
    - name: Install Clippy
      run: rustup component add clippy
    
    # remove LLVM on macOS so that only Apple's clang is used
    - name: Remove LLVM (macOS)
      run: brew uninstall llvm
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin
    
    - name: 'Build all targets in skia-safe for x86_64-apple-darwin with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-darwin
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-darwin "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios
    
    - name: 'Build all targets in skia-safe for aarch64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target aarch64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target aarch64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios
    
    - name: 'Build all targets in skia-safe for x86_64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ runner.temp }}/skia-org
  macos-beta-all-features:
    runs-on: macOS-10.15
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: beta
    
    - name: Install Clippy
      run: rustup component add clippy
    
    # remove LLVM on macOS so that only Apple's clang is used
    - name: Remove LLVM (macOS)
      run: brew uninstall llvm
    - name: 'Install Rust target x86_64-apple-darwin'
      shell: bash
      run: |
        rustup target add x86_64-apple-darwin
    
    - name: 'Build all targets in skia-safe for x86_64-apple-darwin with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-darwin
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-darwin26-clang
          export CXX_${TARGET}=x86_64-apple-darwin26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-darwin26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-darwin
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-darwin -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-darwin "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-darwin
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target aarch64-apple-ios'
      shell: bash
      run: |
        rustup target add aarch64-apple-ios
    
    - name: 'Build all targets in skia-safe for aarch64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=aarch64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=aarch64-apple-ios26-clang
          export CXX_${TARGET}=aarch64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=aarch64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target aarch64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target aarch64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target aarch64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-aarch64-apple-ios
        path: ${{ runner.temp }}/skia-org
    - name: 'Install Rust target x86_64-apple-ios'
      shell: bash
      run: |
        rustup target add x86_64-apple-ios
    
    - name: 'Build all targets in skia-safe for x86_64-apple-ios with features gl,metal,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-apple-ios
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-apple-ios26-clang
          export CXX_${TARGET}=x86_64-apple-ios26-clang++
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-apple-ios26-clang
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "gl,metal,textlayout,vulkan,webp" --target x86_64-apple-ios
        export SKIA_BINARIES_TAG=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${BUILD_ARTIFACTSTAGINGDIRECTORY}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: false
      run: |
        cargo clippy --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: false
      run: |
        cargo test --all --release --features gl,metal,textlayout,vulkan,webp --all-targets --target x86_64-apple-ios -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features gl,metal,textlayout,vulkan,webp --target x86_64-apple-ios "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-apple-ios
        path: ${{ runner.temp }}/skia-org