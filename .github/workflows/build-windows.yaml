name: 'Rust Skia - Build'
on: [push]

jobs:
  build-windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
    
    - name: Install Clippy
      run: rustup component add clippy
      shell: bash
    
    - name: Setup Python 2
      uses: actions/setup-python@v2
      with:
        python-version: '2.7.18'
        architecture: 'x64'
    
    - name: Python Version
      run: python --version
    
    - name: Install LLVM
      run: choco install llvm
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        set -e
        rustup target add x86_64-pc-windows-msvc
    
    - name: 'Build all targets in skia-safe for x86_64-pc-windows-msvc with features '
      shell: bash
      run: |
        set -e
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc$(androidAPILevel)-clang$(androidBinExt)
          export CXX_${TARGET}=x86_64-pc-windows-msvc$(androidAPILevel)-clang++$(androidBinExt)
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc$(androidAPILevel)-clang$(androidBinExt)
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "" --target x86_64-pc-windows-msvc
        export SKIA_BINARIES_TAG=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "$(Build.ArtifactStagingDirectory)/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"