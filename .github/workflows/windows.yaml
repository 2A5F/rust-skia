# Generated by mk-workflows.

name: 'windows'
on: [push]

concurrency: 
  group: 'windows-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  windows-stable-all-features:
    runs-on: windows-2019
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable
    
    - name: Install Clippy
      run: rustup component add clippy
      shell: bash
    
    - name: Setup Python 2
      uses: actions/setup-python@v2
      with:
        python-version: '2.7.18'
        architecture: 'x64'
    
    - name: Python Version
      run: python --version
    
    - name: Install LLVM
      run: choco install llvm
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add x86_64-pc-windows-msvc
    
    - name: 'Build all targets in skia-safe for x86_64-pc-windows-msvc with features d3d,gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=x86_64-pc-windows-msvc26-clang++.exe
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "d3d,gl,textlayout,vulkan,webp" --target x86_64-pc-windows-msvc
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: true
      run: |
        cargo run --release --features d3d,gl,textlayout,vulkan,webp --target x86_64-pc-windows-msvc "${{ runner.temp }}/skia-org" --driver cpu --driver pdf --driver svg
      
    - name: 'Upload skia-org example images'
      if: true
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-pc-windows-msvc
        path: ${{ runner.temp }}/skia-org
  windows-stable-all-features-debug:
    runs-on: windows-2019
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env: 
      SKIA_DEBUG: 1
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: stable
    
    - name: Install Clippy
      run: rustup component add clippy
      shell: bash
    
    - name: Setup Python 2
      uses: actions/setup-python@v2
      with:
        python-version: '2.7.18'
        architecture: 'x64'
    
    - name: Python Version
      run: python --version
    
    - name: Install LLVM
      run: choco install llvm
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add x86_64-pc-windows-msvc
    
    - name: 'Build all targets in skia-safe for x86_64-pc-windows-msvc with features d3d,gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=x86_64-pc-windows-msvc26-clang++.exe
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "d3d,gl,textlayout,vulkan,webp" --target x86_64-pc-windows-msvc
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features d3d,gl,textlayout,vulkan,webp --target x86_64-pc-windows-msvc "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-pc-windows-msvc
        path: ${{ runner.temp }}/skia-org
  windows-beta-all-features:
    runs-on: windows-2019
    # Containers are not supported on Windows.
    # container: ghcr.io/pragmatrix/rust-skia-windows:latest
    env: 
      SKIA_DEBUG: 0
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    
    - name: Install Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: beta
    
    - name: Install Clippy
      run: rustup component add clippy
      shell: bash
    
    - name: Setup Python 2
      uses: actions/setup-python@v2
      with:
        python-version: '2.7.18'
        architecture: 'x64'
    
    - name: Python Version
      run: python --version
    
    - name: Install LLVM
      run: choco install llvm
    - name: 'Install Rust target x86_64-pc-windows-msvc'
      shell: bash
      run: |
        rustup target add x86_64-pc-windows-msvc
    
    - name: 'Build all targets in skia-safe for x86_64-pc-windows-msvc with features d3d,gl,textlayout,vulkan,webp'
      shell: bash
      run: |
        if [ "false" == "true" ]; then
          TARGET=x86_64-pc-windows-msvc
          TARGET=${TARGET//-/_}
          export CC_${TARGET}=x86_64-pc-windows-msvc26-clang.exe
          export CXX_${TARGET}=x86_64-pc-windows-msvc26-clang++.exe
          TARGET_UPPERCASE=`echo "${TARGET}" | tr [a-z] [A-Z]`
          export CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=x86_64-pc-windows-msvc26-clang.exe
          echo "Set CC, CXX, and CARGO_LINKER target specific environment variables for Android"
        fi
        cargo clean
        cargo build -p skia-safe --all-targets --release --features "d3d,gl,textlayout,vulkan,webp" --target x86_64-pc-windows-msvc
        export SKIA_BINARIES_TAG=$(cat "${{ runner.temp }}/skia-binaries/tag.txt")
        export SKIA_BINARIES_KEY=$(cat "${{ runner.temp }}/skia-binaries/key.txt")
        echo "##vso[task.setvariable variable=SKIA_BINARIES_TAG;]${SKIA_BINARIES_TAG}"
        echo "##vso[task.setvariable variable=SKIA_BINARIES_KEY;]${SKIA_BINARIES_KEY}"
      env:
        BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ runner.temp }}
    
    - name: 'Run Clippy'
      shell: bash
      if: true
      run: |
        cargo clippy --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- -D warnings
    
    - name: 'Test all workspace projects'
      shell: bash
      if: true
      run: |
        cargo test --all --release --features d3d,gl,textlayout,vulkan,webp --all-targets --target x86_64-pc-windows-msvc -- --nocapture
      
    - name: 'Generate skia-org example images'
      shell: bash
      if: false
      run: |
        cargo run --release --features d3d,gl,textlayout,vulkan,webp --target x86_64-pc-windows-msvc "${{ runner.temp }}/skia-org" 
      
    - name: 'Upload skia-org example images'
      if: false
      uses: actions/upload-artifact@v2
      with:
        name: skia-org-images-x86_64-pc-windows-msvc
        path: ${{ runner.temp }}/skia-org